// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var $$EventTarget = {};

var $$Event = {};

var TextDecoderOptions = {};

function $$new(label, options) {
  if (label !== undefined) {
    if (options !== undefined) {
      return new TextDecoder(label, options);
    } else {
      return new TextDecoder(label, undefined);
    }
  } else if (options !== undefined) {
    return new TextDecoder(undefined, options);
  } else {
    return new TextDecoder(undefined, undefined);
  }
}

var $$TextDecoder$1 = {
  $$new: $$new
};

var $$TextEncoder = {};

var $$AbortSignal = {};

var $$AbortController = {};

var $$DOMException = {};

var $$ImageData = {};

var $$DOMStringList = {};

var $$Location = {};

var GPURequestAdapterOptions = {};

var GPUAdapterFeatures = {};

var GPUSupportedLimits = {};

var GPUDeviceDescriptor = {};

var GPUAdapterInfo = {};

var GPUSupportedFeatures = {};

var GPUDeviceLostInfo = {};

var GPUDevice = {};

var GPUAdapter = {};

var GPU = {};

var $$Navigator = {};

var $$URLSearchParams = {};

var $$URL = {};

var URLPatternInit = {};

var URLPatternInput = {};

function $$new$1(input, baseURL) {
  return new URLPattern(input._0, baseURL);
}

var $$URLPattern$1 = {
  $$new: $$new$1
};

var ErrorEventInit = {};

var $$ErrorEvent = {};

var $$Window = {};

var ReadableStreamBYOBReaderReadOptions = {};

var ReadableStreamBYOBReadResult = {};

var $$ReadableStreamBYOBReader = {};

var $$WritableStreamDefaultWriter = {};

var $$WritableStream = {};

var PipeOptions = {};

var $$ReadableStream = {};

var Transform = {};

var $$Headers = {};

var BufferSource = {};

var BlobParts = {};

var BlobPropertyBag = {};

function $$new$2(parts, options) {
  var bufferSources = parts._0;
  if (options !== undefined) {
    return new Blob(bufferSources, options);
  } else {
    return new Blob(bufferSources, undefined);
  }
}

var $$Blob$1 = {
  $$new: $$new$2
};

var $$File = {};

var FormDataEntryValue = {};

function append(t, name, value, fileName) {
  var file = value._0;
  if (fileName !== undefined) {
    t.append(name, file, fileName);
  } else {
    t.append(name, file, undefined);
  }
}

var $$FormData = {
  append: append
};

var Body = {};

var BodyInit = {};

var ResponseInit = {};

function _newBlob(init, body) {
  return {
          body: Caml_option.some(body),
          cache: Belt_Option.getWithDefault(init.cache, ""),
          credentials: Belt_Option.getWithDefault(init.credentials, ""),
          destination: Belt_Option.getWithDefault(init.destination, ""),
          headers: init.headers,
          integrity: Belt_Option.getWithDefault(init.integrity, ""),
          keepalive: Belt_Option.getWithDefault(init.keepalive, true),
          method: Belt_Option.getWithDefault(init.method, "GET"),
          mode: Belt_Option.getWithDefault(init.mode, "cors"),
          redirect: Belt_Option.getWithDefault(init.redirect, "follow"),
          referer: Belt_Option.getWithDefault(init.referer, ""),
          refererPolicy: Belt_Option.getWithDefault(init.refererPolicy, ""),
          signal: Belt_Option.getWithDefault(init.signal, new AbortController().signal),
          window: Belt_Option.getWithDefault(init.window, (function (prim) {
                  return prim.window;
                }))
        };
}

function _newBufferSource(init, body) {
  return {
          body: Caml_option.some(body),
          cache: Belt_Option.getWithDefault(init.cache, ""),
          credentials: Belt_Option.getWithDefault(init.credentials, ""),
          destination: Belt_Option.getWithDefault(init.destination, ""),
          headers: init.headers,
          integrity: Belt_Option.getWithDefault(init.integrity, ""),
          keepalive: Belt_Option.getWithDefault(init.keepalive, true),
          method: Belt_Option.getWithDefault(init.method, "GET"),
          mode: Belt_Option.getWithDefault(init.mode, "cors"),
          redirect: Belt_Option.getWithDefault(init.redirect, "follow"),
          referer: Belt_Option.getWithDefault(init.referer, ""),
          refererPolicy: Belt_Option.getWithDefault(init.refererPolicy, ""),
          signal: Belt_Option.getWithDefault(init.signal, new AbortController().signal),
          window: Belt_Option.getWithDefault(init.window, (function (prim) {
                  return prim.window;
                }))
        };
}

function _newFormData(init, body) {
  return {
          body: Caml_option.some(body),
          cache: Belt_Option.getWithDefault(init.cache, ""),
          credentials: Belt_Option.getWithDefault(init.credentials, ""),
          destination: Belt_Option.getWithDefault(init.destination, ""),
          headers: init.headers,
          integrity: Belt_Option.getWithDefault(init.integrity, ""),
          keepalive: Belt_Option.getWithDefault(init.keepalive, true),
          method: Belt_Option.getWithDefault(init.method, "GET"),
          mode: Belt_Option.getWithDefault(init.mode, "cors"),
          redirect: Belt_Option.getWithDefault(init.redirect, "follow"),
          referer: Belt_Option.getWithDefault(init.referer, ""),
          refererPolicy: Belt_Option.getWithDefault(init.refererPolicy, ""),
          signal: Belt_Option.getWithDefault(init.signal, new AbortController().signal),
          window: Belt_Option.getWithDefault(init.window, (function (prim) {
                  return prim.window;
                }))
        };
}

function _newURLSearchParams(init, body) {
  return {
          body: Caml_option.some(body),
          cache: Belt_Option.getWithDefault(init.cache, ""),
          credentials: Belt_Option.getWithDefault(init.credentials, ""),
          destination: Belt_Option.getWithDefault(init.destination, ""),
          headers: init.headers,
          integrity: Belt_Option.getWithDefault(init.integrity, ""),
          keepalive: Belt_Option.getWithDefault(init.keepalive, true),
          method: Belt_Option.getWithDefault(init.method, "GET"),
          mode: Belt_Option.getWithDefault(init.mode, "cors"),
          redirect: Belt_Option.getWithDefault(init.redirect, "follow"),
          referer: Belt_Option.getWithDefault(init.referer, ""),
          refererPolicy: Belt_Option.getWithDefault(init.refererPolicy, ""),
          signal: Belt_Option.getWithDefault(init.signal, new AbortController().signal),
          window: Belt_Option.getWithDefault(init.window, (function (prim) {
                  return prim.window;
                }))
        };
}

function _newReadableStream(init, body) {
  return {
          body: Caml_option.some(body),
          cache: Belt_Option.getWithDefault(init.cache, ""),
          credentials: Belt_Option.getWithDefault(init.credentials, ""),
          destination: Belt_Option.getWithDefault(init.destination, ""),
          headers: init.headers,
          integrity: Belt_Option.getWithDefault(init.integrity, ""),
          keepalive: Belt_Option.getWithDefault(init.keepalive, true),
          method: Belt_Option.getWithDefault(init.method, "GET"),
          mode: Belt_Option.getWithDefault(init.mode, "cors"),
          redirect: Belt_Option.getWithDefault(init.redirect, "follow"),
          referer: Belt_Option.getWithDefault(init.referer, ""),
          refererPolicy: Belt_Option.getWithDefault(init.refererPolicy, ""),
          signal: Belt_Option.getWithDefault(init.signal, new AbortController().signal),
          window: Belt_Option.getWithDefault(init.window, (function (prim) {
                  return prim.window;
                }))
        };
}

function _newString(init, body) {
  return {
          body: body,
          cache: Belt_Option.getWithDefault(init.cache, ""),
          credentials: Belt_Option.getWithDefault(init.credentials, ""),
          destination: Belt_Option.getWithDefault(init.destination, ""),
          headers: init.headers,
          integrity: Belt_Option.getWithDefault(init.integrity, ""),
          keepalive: Belt_Option.getWithDefault(init.keepalive, true),
          method: Belt_Option.getWithDefault(init.method, "GET"),
          mode: Belt_Option.getWithDefault(init.mode, "cors"),
          redirect: Belt_Option.getWithDefault(init.redirect, "follow"),
          referer: Belt_Option.getWithDefault(init.referer, ""),
          refererPolicy: Belt_Option.getWithDefault(init.refererPolicy, ""),
          signal: Belt_Option.getWithDefault(init.signal, new AbortController().signal),
          window: Belt_Option.getWithDefault(init.window, (function (prim) {
                  return prim.window;
                }))
        };
}

var RequestInit = {
  _newBlob: _newBlob,
  _newBufferSource: _newBufferSource,
  _newFormData: _newFormData,
  _newURLSearchParams: _newURLSearchParams,
  _newReadableStream: _newReadableStream,
  _newString: _newString
};

var RequestInput = {};

function $$new$3(input, init) {
  if (input.TAG === "String") {
    var s = input._0;
    if (init === undefined) {
      return new Request(s, undefined);
    }
    var match = init.body;
    if (match === undefined) {
      return new Request(s, init);
    }
    switch (match.TAG) {
      case "Blob" :
          return new Request(s, _newBlob(init, match._0));
      case "BufferSource" :
          return new Request(s, _newBufferSource(init, match._0));
      case "FormData" :
          return new Request(s, _newFormData(init, match._0));
      case "URLSearchParams" :
          return new Request(s, _newURLSearchParams(init, match._0));
      case "ReadableStream" :
          return new Request(s, _newReadableStream(init, match._0));
      case "String" :
          return new Request(s, _newString(init, match._0));
      
    }
  } else {
    var url = input._0;
    if (init === undefined) {
      return new Request(url, undefined);
    }
    var match$1 = init.body;
    if (match$1 === undefined) {
      return new Request(url, init);
    }
    switch (match$1.TAG) {
      case "Blob" :
          return new Request(url, _newBlob(init, match$1._0));
      case "BufferSource" :
          return new Request(url, _newBufferSource(init, match$1._0));
      case "FormData" :
          return new Request(url, _newFormData(init, match$1._0));
      case "URLSearchParams" :
          return new Request(url, _newURLSearchParams(init, match$1._0));
      case "ReadableStream" :
          return new Request(url, _newReadableStream(init, match$1._0));
      case "String" :
          return new Request(url, _newString(init, match$1._0));
      
    }
  }
}

var $$Request$1 = {
  $$new: $$new$3
};

function $$new$4(body, init) {
  return new Response(body._0, init);
}

var $$Response$1 = {
  $$new: $$new$4
};

var FetchRequestInput = {};

function $$fetch$1(input, init) {
  switch (input.TAG) {
    case "String" :
        var input$1 = input._0;
        if (init === undefined) {
          return fetch(input$1, undefined);
        }
        var match = init.body;
        if (match === undefined) {
          return fetch(input$1, init);
        }
        switch (match.TAG) {
          case "Blob" :
              return fetch(input$1, _newBlob(init, match._0));
          case "BufferSource" :
              return fetch(input$1, _newBufferSource(init, match._0));
          case "FormData" :
              return fetch(input$1, _newFormData(init, match._0));
          case "URLSearchParams" :
              return fetch(input$1, _newURLSearchParams(init, match._0));
          case "ReadableStream" :
              return fetch(input$1, _newReadableStream(init, match._0));
          case "String" :
              return fetch(input$1, _newString(init, match._0));
          
        }
    case "URL" :
        var input$2 = input._0;
        if (init === undefined) {
          return fetch(input$2, undefined);
        }
        var match$1 = init.body;
        if (match$1 === undefined) {
          return fetch(input$2, init);
        }
        switch (match$1.TAG) {
          case "Blob" :
              return fetch(input$2, _newBlob(init, match$1._0));
          case "BufferSource" :
              return fetch(input$2, _newBufferSource(init, match$1._0));
          case "FormData" :
              return fetch(input$2, _newFormData(init, match$1._0));
          case "URLSearchParams" :
              return fetch(input$2, _newURLSearchParams(init, match$1._0));
          case "ReadableStream" :
              return fetch(input$2, _newReadableStream(init, match$1._0));
          case "String" :
              return fetch(input$2, _newString(init, match$1._0));
          
        }
    case "Request" :
        var input$3 = input._0;
        if (init === undefined) {
          return fetch(input$3, undefined);
        }
        var match$2 = init.body;
        if (match$2 === undefined) {
          return fetch(input$3, init);
        }
        switch (match$2.TAG) {
          case "Blob" :
              return fetch(input$3, _newBlob(init, match$2._0));
          case "BufferSource" :
              return fetch(input$3, _newBufferSource(init, match$2._0));
          case "FormData" :
              return fetch(input$3, _newFormData(init, match$2._0));
          case "URLSearchParams" :
              return fetch(input$3, _newURLSearchParams(init, match$2._0));
          case "ReadableStream" :
              return fetch(input$3, _newReadableStream(init, match$2._0));
          case "String" :
              return fetch(input$3, _newString(init, match$2._0));
          
        }
    
  }
}

export {
  $$EventTarget ,
  $$Event ,
  TextDecoderOptions ,
  $$TextDecoder$1 as $$TextDecoder,
  $$TextEncoder ,
  $$AbortSignal ,
  $$AbortController ,
  $$DOMException ,
  $$ImageData ,
  $$DOMStringList ,
  $$Location ,
  GPURequestAdapterOptions ,
  GPUAdapterFeatures ,
  GPUSupportedLimits ,
  GPUDeviceDescriptor ,
  GPUAdapterInfo ,
  GPUSupportedFeatures ,
  GPUDeviceLostInfo ,
  GPUDevice ,
  GPUAdapter ,
  GPU ,
  $$Navigator ,
  $$URLSearchParams ,
  $$URL ,
  URLPatternInit ,
  URLPatternInput ,
  $$URLPattern$1 as $$URLPattern,
  ErrorEventInit ,
  $$ErrorEvent ,
  $$Window ,
  ReadableStreamBYOBReaderReadOptions ,
  ReadableStreamBYOBReadResult ,
  $$ReadableStreamBYOBReader ,
  $$WritableStreamDefaultWriter ,
  $$WritableStream ,
  PipeOptions ,
  $$ReadableStream ,
  Transform ,
  $$Headers ,
  BufferSource ,
  BlobParts ,
  BlobPropertyBag ,
  $$Blob$1 as $$Blob,
  $$File ,
  FormDataEntryValue ,
  $$FormData ,
  Body ,
  BodyInit ,
  ResponseInit ,
  RequestInit ,
  RequestInput ,
  $$Request$1 as $$Request,
  $$Response$1 as $$Response,
  FetchRequestInput ,
  $$fetch$1 as $$fetch,
}
/* No side effect */
