// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";

var ConsoleSize = {};

var InspectOptions = {};

var SetRawOptions = {};

var SeekMode = {};

var FileInfo = {};

function seek(fs, offset, whence) {
  var whence$1;
  switch (whence) {
    case "Start" :
        whence$1 = 0;
        break;
    case "Current" :
        whence$1 = 1;
        break;
    case "End" :
        whence$1 = 2;
        break;
    
  }
  return fs.seek(offset, whence$1);
}

function seekSync(fs, offset, whence) {
  var whence$1;
  switch (whence) {
    case "Start" :
        whence$1 = 0;
        break;
    case "Current" :
        whence$1 = 1;
        break;
    case "End" :
        whence$1 = 2;
        break;
    
  }
  return fs.seekSync(offset, whence$1);
}

var FsFile = {
  seek: seek,
  seekSync: seekSync
};

var MakeTempOptions = {};

var MkdirOptions = {};

var OpenOptions = {};

var DirEntry = {};

var ReadFileOptions = {};

var RemoveOptions = {};

var SymlinkOptions = {};

var WatchFsOptions = {};

var FsWatcher = {};

var WriteFileOptions = {};

var HttpServer = {};

var NetAddr = {};

var ServeHandlerInfo = {};

var ServeHandler = {};

var ServeHandlerAsync = {};

var ServeUnixOptions = {};

var ServeOptions = {};

var ServeTlsOptions = {};

var ListenOptions = {};

var TcpListenOptions = {};

var ListenTlsOptions = {};

var Listener = {};

var ConnectOptions = {};

var TcpConn = {};

var Conn = {};

var ConnectTlsOptions = {};

var TlsHandshakeInfo = {};

var TlsConn = {};

var NetworkInterfaceInfo = {};

var ResolveDnsOptions = {};

var StartTlsOptions = {};

var CommandOptions = {};

var CommandOutput = {};

var CommandStatus = {};

var ChildProcess = {};

var Command = {};

var Data = {};

function writeTextFile(path, data, options) {
  return Deno.writeTextFile(path, data._0, options);
}

function serve(handler, asyncHandler) {
  if (handler !== undefined) {
    if (asyncHandler !== undefined) {
      return PervasivesU.failwith("serve: invalid arguments");
    } else {
      return Deno.serve(handler);
    }
  } else if (asyncHandler !== undefined) {
    return Deno.serve(asyncHandler);
  } else {
    return PervasivesU.failwith("serve: invalid arguments");
  }
}

function serveWithOptions(options, handler, asyncHandler) {
  if (handler !== undefined) {
    if (asyncHandler !== undefined) {
      return PervasivesU.failwith("serve: invalid arguments");
    } else {
      return Deno.serve(options, handler);
    }
  } else if (asyncHandler !== undefined) {
    return Deno.serve(options, asyncHandler);
  } else {
    return Deno.serve(options, undefined);
  }
}

function serveWithUnixOptions(options, handler, asyncHandler) {
  if (handler !== undefined) {
    if (asyncHandler !== undefined) {
      return PervasivesU.failwith("serve: invalid arguments");
    } else {
      return Deno.serve(options, handler);
    }
  } else if (asyncHandler !== undefined) {
    return Deno.serve(asyncHandler);
  } else {
    return Deno.serve(options, undefined);
  }
}

function serveWithTlsOptions(options, handler, asyncHandler) {
  if (handler !== undefined) {
    if (asyncHandler !== undefined) {
      return PervasivesU.failwith("serve: invalid arguments");
    } else {
      return Deno.serve(options, handler);
    }
  } else if (asyncHandler !== undefined) {
    return Deno.serve(asyncHandler);
  } else {
    return Deno.serve(options, undefined);
  }
}

var Context = {};

var ContextManager = {};

var Attributes = {};

var IArrayValue = {};

var IKeyValueList = {};

var IAnyValue = {};

var IKeyValue = {};

var IResource = {};

var HrTime = {};

var SpanStatusCode = {};

var SpanStatus = {};

var TraceState = {};

var SpanContext = {};

var Link = {};

var SpanKind = {};

var InstrumentationLibrary = {};

var TimedEvent = {};

var ReadableSpan = {};

var SpanExporter = {};

var Telemetry = {
  Context: Context,
  ContextManager: ContextManager,
  Attributes: Attributes,
  IArrayValue: IArrayValue,
  IKeyValueList: IKeyValueList,
  IAnyValue: IAnyValue,
  IKeyValue: IKeyValue,
  IResource: IResource,
  HrTime: HrTime,
  SpanStatusCode: SpanStatusCode,
  SpanStatus: SpanStatus,
  TraceState: TraceState,
  SpanContext: SpanContext,
  Link: Link,
  SpanKind: SpanKind,
  InstrumentationLibrary: InstrumentationLibrary,
  TimedEvent: TimedEvent,
  ReadableSpan: ReadableSpan,
  SpanExporter: SpanExporter
};

var UpgradeWebSocketOptions = {};

var BinaryType = {};

var ArrayBufferLike = {};

var $$Blob = {};

var ArrayBufferView = {};

var WebSocketData = {};

var AddEventListenerOptions = {};

var EventListenerOptions = {};

var $$WebSocket = {};

var WebSocketUpgrade = {};

var Writer = {};

var Reader = {};

var IteratorResult = {};

var $$Symbol = {};

var KvU64 = {};

function unwrap(expression) {
  switch (expression.TAG) {
    case "Exact" :
        return {
                exact: expression._0.exact._0
              };
    case "Number" :
    case "Range" :
        return expression._0;
    
  }
}

var CronScheduleExpression = {
  unwrap: unwrap
};

function unwrap$1(schedule) {
  var minute = schedule.minute;
  var hour = schedule.hour;
  var dayOfMonth = schedule.dayOfMonth;
  var month = schedule.month;
  var dayOfWeek = schedule.dayOfWeek;
  return {
          minute: minute !== undefined ? unwrap(minute) : undefined,
          hour: hour !== undefined ? unwrap(hour) : undefined,
          dayOfMonth: dayOfMonth !== undefined ? unwrap(dayOfMonth) : undefined,
          month: month !== undefined ? unwrap(month) : undefined,
          dayOfWeek: dayOfWeek !== undefined ? unwrap(dayOfWeek) : undefined
        };
}

var CronSchedule = {
  unwrap: unwrap$1
};

var KvConsistencyLevel = {};

function unwrap$2(key) {
  return key._0;
}

var KvKeyPart = {
  unwrap: unwrap$2
};

function unwrap$3(key) {
  return Belt_Array.map(Belt_Array.map(key, unwrap$2), (function (prim) {
                return prim;
              }));
}

var KvKey = {
  unwrap: unwrap$3
};

var KvEntry = {};

var KvEntryMaybe = {};

var KvListIterator = {};

var KvListSelector = {};

function unwrap$4(mutation) {
  return mutation._0;
}

var KvMutation = {
  unwrap: unwrap$4
};

var EnqueueOptions = {};

var KvCommitResult = {};

var KvGetOptions = {};

var KvListOptions = {};

function unwrap$5(handler) {
  if (handler.TAG === "Fn") {
    return handler._0;
  }
  
}

var KvListenQueueHandler = {
  unwrap: unwrap$5
};

var KvSetOptions = {};

var KvWatchOptions = {};

var AtomicCheck = {};

var AtomicOperation = {};

var Kv = {};

function unwrap$6(schedule) {
  return schedule._0;
}

var Schedule = {
  unwrap: unwrap$6
};

function unwrap$7(handler) {
  if (handler.TAG === "Fn") {
    return handler._0;
  }
  
}

var CronHandler = {
  unwrap: unwrap$7
};

function unwrap$8(descriptor) {
  var match = descriptor.command;
  return {
          name: descriptor.name,
          command: match !== undefined ? match._0 : undefined
        };
}

var RunPermissionDescriptor = {
  unwrap: unwrap$8
};

function unwrap$9(descriptor) {
  var match = descriptor.path;
  return {
          name: descriptor.name,
          path: match !== undefined ? match._0 : undefined
        };
}

var ReadPermissionDescriptor = {
  unwrap: unwrap$9
};

function unwrap$10(descriptor) {
  var match = descriptor.path;
  return {
          name: descriptor.name,
          path: match !== undefined ? match._0 : undefined
        };
}

var WritePermissionDescriptor = {
  unwrap: unwrap$10
};

var NetPermissionDescriptor = {};

var EnvPermissionDescriptor = {};

var SysPermissionDescriptor = {};

function unwrap$11(descriptor) {
  var match = descriptor.path;
  return {
          name: descriptor.name,
          path: match !== undefined ? match._0 : undefined
        };
}

var FfiPermissionDescriptor = {
  unwrap: unwrap$11
};

function unwrap$12(descriptor) {
  switch (descriptor.TAG) {
    case "Run" :
        return unwrap$8(descriptor._0);
    case "Read" :
        return unwrap$9(descriptor._0);
    case "Ffi" :
        return unwrap$11(descriptor._0);
    default:
      return descriptor._0;
  }
}

var PermissionDescriptor = {
  unwrap: unwrap$12
};

var PermissionState = {};

var $$PermissionStatus = {};

var $$Permissions = {};

var BenchContext = {};

function unwrap$13(permission) {
  var match = permission.env;
  var tmp;
  tmp = match !== undefined ? (
      typeof match !== "object" ? "inherit" : match._0
    ) : undefined;
  var match$1 = permission.ffi;
  var tmp$1;
  tmp$1 = match$1 !== undefined ? (
      typeof match$1 !== "object" ? "inherit" : match$1._0
    ) : undefined;
  var match$2 = permission.import;
  var tmp$2;
  tmp$2 = match$2 !== undefined ? (
      typeof match$2 !== "object" ? "inherit" : match$2._0
    ) : undefined;
  var match$3 = permission.net;
  var tmp$3;
  tmp$3 = match$3 !== undefined ? (
      typeof match$3 !== "object" ? "inherit" : match$3._0
    ) : undefined;
  var match$4 = permission.read;
  var tmp$4;
  tmp$4 = match$4 !== undefined ? (
      typeof match$4 !== "object" ? "inherit" : match$4._0
    ) : undefined;
  var match$5 = permission.run;
  var tmp$5;
  tmp$5 = match$5 !== undefined ? (
      typeof match$5 !== "object" ? "inherit" : match$5._0
    ) : undefined;
  var match$6 = permission.sys;
  var tmp$6;
  tmp$6 = match$6 !== undefined ? (
      typeof match$6 !== "object" ? "inherit" : match$6._0
    ) : undefined;
  var match$7 = permission.write;
  var tmp$7;
  tmp$7 = match$7 !== undefined ? (
      typeof match$7 !== "object" ? "inherit" : match$7._0
    ) : undefined;
  return {
          env: tmp,
          ffi: tmp$1,
          import: tmp$2,
          net: tmp$3,
          read: tmp$4,
          run: tmp$5,
          sys: tmp$6,
          write: tmp$7
        };
}

var PermissionsObject = {
  unwrap: unwrap$13
};

function unwrap$14(options) {
  if (typeof options !== "object") {
    if (options === "Inherit") {
      return "inherit";
    } else {
      return "none";
    }
  } else {
    return unwrap$13(options._0);
  }
}

var PermissionsOptions = {
  unwrap: unwrap$14
};

function unwrap$15(definition) {
  var value = definition.ignore;
  var value$1 = definition.group;
  var value$2 = definition.baseline;
  var value$3 = definition.only;
  var value$4 = definition.sanitizeExit;
  var permissions = definition.permissions;
  return {
          name: definition.name,
          fn: definition.fn._0,
          ignore: value !== undefined ? value : undefined,
          group: value$1 !== undefined ? value$1 : undefined,
          baseline: value$2 !== undefined ? value$2 : undefined,
          only: value$3 !== undefined ? value$3 : undefined,
          sanitizeExit: value$4 !== undefined ? value$4 : undefined,
          permissions: permissions !== undefined ? unwrap$14(permissions) : undefined
        };
}

var BenchDefinition = {
  unwrap: unwrap$15
};

function unwrap$16(definition) {
  var value = definition.ignore;
  return {
          name: definition.name,
          fn: definition.fn._0,
          ignore: value !== undefined ? value : undefined
        };
}

var TestDefinition = {
  unwrap: unwrap$16
};

function test(d) {
  Deno.test(unwrap$16(d));
}

function bench(b) {
  Deno.bench(unwrap$15(b));
}

export {
  ConsoleSize ,
  InspectOptions ,
  SetRawOptions ,
  SeekMode ,
  FileInfo ,
  FsFile ,
  MakeTempOptions ,
  MkdirOptions ,
  OpenOptions ,
  DirEntry ,
  ReadFileOptions ,
  RemoveOptions ,
  SymlinkOptions ,
  WatchFsOptions ,
  FsWatcher ,
  WriteFileOptions ,
  HttpServer ,
  NetAddr ,
  ServeHandlerInfo ,
  ServeHandler ,
  ServeHandlerAsync ,
  ServeUnixOptions ,
  ServeOptions ,
  ServeTlsOptions ,
  ListenOptions ,
  TcpListenOptions ,
  ListenTlsOptions ,
  Listener ,
  ConnectOptions ,
  TcpConn ,
  Conn ,
  ConnectTlsOptions ,
  TlsHandshakeInfo ,
  TlsConn ,
  NetworkInterfaceInfo ,
  ResolveDnsOptions ,
  StartTlsOptions ,
  CommandOptions ,
  CommandOutput ,
  CommandStatus ,
  ChildProcess ,
  Command ,
  Data ,
  writeTextFile ,
  serve ,
  serveWithOptions ,
  serveWithUnixOptions ,
  serveWithTlsOptions ,
  Telemetry ,
  UpgradeWebSocketOptions ,
  BinaryType ,
  ArrayBufferLike ,
  $$Blob ,
  ArrayBufferView ,
  WebSocketData ,
  AddEventListenerOptions ,
  EventListenerOptions ,
  $$WebSocket ,
  WebSocketUpgrade ,
  Writer ,
  Reader ,
  IteratorResult ,
  $$Symbol ,
  KvU64 ,
  CronScheduleExpression ,
  CronSchedule ,
  KvConsistencyLevel ,
  KvKeyPart ,
  KvKey ,
  KvEntry ,
  KvEntryMaybe ,
  KvListIterator ,
  KvListSelector ,
  KvMutation ,
  EnqueueOptions ,
  KvCommitResult ,
  KvGetOptions ,
  KvListOptions ,
  KvListenQueueHandler ,
  KvSetOptions ,
  KvWatchOptions ,
  AtomicCheck ,
  AtomicOperation ,
  Kv ,
  Schedule ,
  CronHandler ,
  RunPermissionDescriptor ,
  ReadPermissionDescriptor ,
  WritePermissionDescriptor ,
  NetPermissionDescriptor ,
  EnvPermissionDescriptor ,
  SysPermissionDescriptor ,
  FfiPermissionDescriptor ,
  PermissionDescriptor ,
  PermissionState ,
  $$PermissionStatus ,
  $$Permissions ,
  BenchContext ,
  PermissionsObject ,
  PermissionsOptions ,
  BenchDefinition ,
  TestDefinition ,
  test ,
  bench ,
}
/* No side effect */
