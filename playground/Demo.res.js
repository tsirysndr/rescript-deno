// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Io from "jsr:@std/io";
import * as Path from "jsr:@std/path";
import * as Toml from "jsr:@std/toml";
import * as Yaml from "jsr:@std/yaml";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Assert from "jsr:@std/assert";
import * as Deno$TsirysndrRescriptDeno from "../src/Deno.res.js";
import * as Globals$TsirysndrRescriptDeno from "../src/Globals.res.js";
import * as TarTs from "https://deno.land/std@0.212.0/archive/tar.ts";
import * as UntarTs from "https://deno.land/std@0.212.0/archive/untar.ts";

var desc = {
  TAG: "Read",
  _0: {
    name: "read",
    path: {
      TAG: "String",
      _0: "/etc"
    }
  }
};

var status = await Deno$TsirysndrRescriptDeno.$$Permissions.query(Deno.permissions, desc);

console.log("Read permission status:");

console.log(status.state);

var schedule = {
  TAG: "String",
  _0: "* * * * *"
};

var handler = {
  TAG: "Fn",
  _0: (async function () {
      console.log("This will print once a minute");
    })
};

Deno$TsirysndrRescriptDeno.cron("log a message", schedule, handler);

var obj = {
  a: 10,
  b: "hello"
};

console.log(Deno.inspect(obj, undefined));

console.log(Path.join("hello", "world"));

console.log("Hello, world!");

console.log(Deno.env.get("HOME"));

console.log(Deno.env.has("PATH"));

console.log("Deno KV Demo:");

var kv = await Deno.openKv(undefined);

var prefs = {
  username: "ada",
  theme: "dark",
  language: "en-US"
};

var key = [
  {
    TAG: "String",
    _0: "preferences"
  },
  {
    TAG: "String",
    _0: "ada"
  }
];

console.log(Deno$TsirysndrRescriptDeno.KvKey.unwrap(key));

await Deno$TsirysndrRescriptDeno.Kv.set(kv, key, prefs, undefined);

var entry = await Deno$TsirysndrRescriptDeno.Kv.get(kv, key, undefined);

console.log(entry);

console.log(entry.value);

var yaml = "\n  id: 1\n  name: \"Alice\"\n";

console.log(Yaml.parse(yaml, undefined));

var tar = new TarTs.Tar();

var content = new TextEncoder().encode("hello");

var b = new Io.Buffer(content);

var obj$1 = {
  title: "TOML example",
  owner: {
    name: "Bob",
    bio: "Bob is a cool guy"
  }
};

console.log(Toml.stringify(obj$1, undefined));

console.log(b.empty());

console.log(b.bytes());

tar.append("hello.txt", {
      reader: b,
      contentSize: b.bytes().length
    });

console.log(tar);

console.log(tar.getReader());

var reader = tar.getReader();

var untar = new UntarTs.Untar(reader);

console.log(await untar.extract());

Assert.assert(true);

Assert.assertAlmostEquals(0.01, 0.02, 0.1, undefined);

Assert.assertArrayIncludes([
      1,
      2,
      3
    ], [
      1,
      2
    ], undefined);

Assert.assertEquals(1, 1, undefined, undefined);

Assert.assertExists(1, undefined);

Assert.assertFalse(false, undefined);

Assert.assertGreater(4, 1, undefined);

Assert.assertGreaterOrEqual(4, 4, undefined);

Assert.assertLess(1, 4, undefined);

Assert.assertLessOrEqual(4, 4, undefined);

Assert.assertMatch("hello", /hello/, undefined);

Assert.assertNotEquals(1, 2, undefined);

Assert.assertNotMatch("hello", /world/, undefined);

Assert.assertNotStrictEquals(1, 2, undefined);

Assert.assertObjectMatch({
      a: 1
    }, {
      a: 1
    }, undefined);

var z = {
  a: 1
};

Assert.assertStrictEquals(z, z, undefined);

Assert.assertStringIncludes("hello", "ello", undefined);

var MyException = /* @__PURE__ */Caml_exceptions.create("Demo-TsirysndrRescriptDeno.MyException");

Assert.assertThrows((function () {
        throw {
              RE_EXN_ID: MyException,
              message: "hello",
              Error: new Error()
            };
      }), undefined);

console.log(Assert.equal({
          a: 1
        }, {
          a: 1
        }));

var c = new AbortController();

console.log(c.signal);

console.log(new URL("https://deno.land").toString());

var pattern = Globals$TsirysndrRescriptDeno.$$URLPattern.$$new({
      TAG: "String",
      _0: "https://deno.land"
    }, undefined);

console.log(pattern);

var pattern$1 = Globals$TsirysndrRescriptDeno.$$URLPattern.$$new({
      TAG: "URLPatternInit",
      _0: {
        pathname: "/x",
        baseURL: "https://deno.land"
      }
    }, undefined);

console.log(pattern$1);

var params = new URLSearchParams({
      foo: "bar"
    });

console.log(params.toString());

console.log(btoa("hello"));

console.log(atob("aGVsbG8gd29ybGQ="));

var data = new FormData();

Globals$TsirysndrRescriptDeno.$$FormData.append(data, "foo", {
      TAG: "String",
      _0: "bar"
    }, undefined);

console.log(Deno.networkInterfaces());

var request = Globals$TsirysndrRescriptDeno.$$Request.$$new({
      TAG: "String",
      _0: "http://localhost:9007"
    }, {
      body: {
        TAG: "FormData",
        _0: data
      },
      method: "POST"
    });

console.log(request);

console.log(await request.formData());

var text = new TextEncoder().encode("hello");

console.log(Globals$TsirysndrRescriptDeno.$$TextDecoder.$$new(undefined, undefined).decode(text, undefined));

console.log(await Deno.resolveDns("deno.land", "A", undefined));

var command = new (Deno.Command)("ls", {
      stdout: "piped",
      stderr: "piped"
    });

var $$process = command.spawn();

var output = await $$process.output();

var status$1 = await $$process.status;

console.log(status$1.code);

var decoder = Globals$TsirysndrRescriptDeno.$$TextDecoder.$$new(undefined, undefined);

console.log(decoder.decode(output.stdout, undefined));

Deno$TsirysndrRescriptDeno.serveWithOptions({
      port: 9007
    }, undefined, (async function (req) {
        var headers = req.headers;
        var body = await req.text();
        console.log(headers);
        console.log(headers.get("User-Agent"));
        console.log(body);
        return Globals$TsirysndrRescriptDeno.$$Response.$$new({
                    TAG: "String",
                    _0: "Hello, world!"
                  }, undefined);
      }));

var a = 1;

var y = z;

export {
  desc ,
  schedule ,
  handler ,
  kv ,
  prefs ,
  key ,
  entry ,
  yaml ,
  tar ,
  content ,
  b ,
  obj$1 as obj,
  reader ,
  untar ,
  a ,
  z ,
  y ,
  MyException ,
  c ,
  pattern$1 as pattern,
  params ,
  data ,
  request ,
  text ,
  command ,
  $$process ,
  output ,
  status$1 as status,
  decoder ,
}
/* status Not a pure module */
